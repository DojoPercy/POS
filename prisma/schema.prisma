// This is your updated Prisma schema file,
// reflecting the new changes regarding the company.

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Company {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   
  location    String 
  logo        String?  
  city        String 
  currency    String?   @default("USD")
  taxRate     Float?    @default(0.0)
  enableDiscount Boolean?  @default(false)
  isActivated Boolean?  @default(false)
  paymentMethods String[]  @default(["cash", "card"])
  orderProcessingMode String? @default("retail") 
  state       String?  // State or province (optional)
  country     String   // Country
  ownerId     String   @unique @db.ObjectId        // Reference to the owner's User ID
  owner       User     @relation("CompanyOwner", fields: [ownerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdAt   DateTime @default(now())     // Timestamp for creation
  updatedAt   DateTime @updatedAt  
  subcriptionPlan String?       
  subscriptionStatus String?
  subscriptionStartDate DateTime?
  subscriptionEndDate DateTime?
  subscriptionPlanEndDate DateTime?
  subscriptionPlanStartDate DateTime?
  subscriptionPlanId String?
  subscriptionPaymentId String?
  subscriptionPaymentStatus String?
  subscriptionPaymentAmount Float?
  subscriptionPaymentDate DateTime?
  subscriptionPaymentMethod String?
  subscriptionPaymentCurrency String?
  subscriptionPaymentTransactionId String?
  subscriptionPaymentTransactionStatus String?
  subscriptionPaymentTransactionDate DateTime?
  subscriptionPaymentTransactionAmount Float?
  subscriptionPaymentTransactionCurrency String?
  subscriptionPaymentTransactionMethod String?
  

  branches    Branch[]  // Relation to branches
  users       User[]    @relation("CompanyUsers")
  menus       Menu[]    

  Order Order[]
  Expense Expense[]
}

model User {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  email       String   @unique
  fullname    String?             
  password    String                      
  role        String                      // User roles: "owner", "manager", "waiter", "kitchen"
  phone       String?                     
  branchId    String?   @db.ObjectId       // Foreign key linking the user to a branch
  companyId   String?   @db.ObjectId       // Foreign key linking the user to a company
  status      String?    @default("active") 
  createdAt   DateTime? @default(now())     // Timestamp for account creation
  updatedAt   DateTime? @updatedAt          // Timestamp for the last update
  
  company     Company?  @relation("CompanyUsers", fields: [companyId], references: [id])
  managedCompany Company? @relation("CompanyOwner")
}


model Branch {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   // Name of the branch
  location    String   // Full address of the branch
  city        String   // City where the branch is located
  state       String?  // State or province (optional)
  country     String   // Country where the branch is located
  openingHours String?  // Operating hours (e.g., "9:00 AM - 10:00 PM")
  status      String   @default("active") // Status of the branch: active or inactive
  managerId   String?  @db.ObjectId       // Reference to the assigned branch manager's ID @unique
  createdBy   String?  @db.ObjectId       // Reference to the owner's ID who created the branch
  companyId   String   @db.ObjectId       // Foreign key linking the branch to a company
  createdAt   DateTime? @default(now())    // Timestamp when the branch was created
  updatedAt   DateTime? @updatedAt         // Timestamp for the last update

  company     Company  @relation(fields: [companyId], references: [id])

  Order Order[]
  Expense Expense[]
}

model Menu {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  price       PriceType[]
  companyId   String      @db.ObjectId
  imageBase64 String?
  categoryId  String      @db.ObjectId
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  imageUrl   String?
  OrderLine   OrderLine[]
  company     Company     @relation(fields: [companyId], references: [id])
  category    MenuCategory? @relation(fields: [categoryId], references: [id])
}

model PriceType {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  price      Float
  menuItemId String  @db.ObjectId
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  menuItem   Menu     @relation(fields: [menuItemId], references: [id])
}

model MenuCategory {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  companyId   String  @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  menus       Menu[]
}

model OrderLine {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId     String   @db.ObjectId
  order       Order    @relation(fields: [orderId], references: [id]) 
  menuItemId  String   @db.ObjectId
  menuItem    Menu     @relation(fields: [menuItemId], references: [id]) 
  quantity    Int      @default(1)
  price       Float    @default(0.0)
  totalPrice  Float    @default(0.0) 
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("order_lines")
}

model Order {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  waiterId        String      @db.ObjectId
  branchId        String      @db.ObjectId
  orderLines      OrderLine[] 
  companyId       String      @db.ObjectId
  totalPrice      Float       @default(0.0)
  discount        Float       @default(0.0)
  rounding        Float       @default(0.0)
  finalPrice      Float       @default(0.0) // totalPrice - discount + 
  payment         Payment[]   
  orderStatus     OrderStatus      @default(PENDING)
  orderedDate     DateTime    @default(now())
  requiredDate    DateTime?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  orderNumber     String     
  branch          Branch      @relation(fields: [branchId], references: [id])
  company         Company     @relation(fields: [companyId], references: [id])

  @@map("orders")
  @@index([orderNumber]) 
  @@index([branchId])
  @@index([companyId])
}
enum OrderStatus {
    PENDING       
    PROCESSING 
    COMPLETED   
    CANCELED 
    PAID
  }
  


model OrderCounter {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId 
  branchId  String  
  date      DateTime
  lastNumber Int

   @@unique([branchId, date], name: "branchId_date")
}
model Supplier {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  phone           String?
  email           String?
  address         String?
  homePage        String?
  supplierContact SupplierContact[]


  @@map("suppliers")
}

model SupplierContact {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  jobTitle      String?
  phone         String?
  email         String?
  accountNumber String?
  accountBank   String?
  supplier      Supplier @relation(fields: [supplierId], references: [id])
  supplierId    String   @db.ObjectId

  @@map("supplier_contacts")
}



model Payment {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  order         Order       @relation(fields: [orderId], references: [id])
  orderId       String      @db.ObjectId
  date          DateTime    @default(now())
  amount        Float
  paymentDate   DateTime
  currency      String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  paymentStatus String
  companyId     String      @db.ObjectId
  branchId      String      @db.ObjectId
   paymentTypeId String?     @db.ObjectId

  @@map("payments")
}

model ExpenseType {
  id      String    @id @default(auto()) @map("_id") @db.ObjectId
  name    String
 

  @@map("expense_types")
}

model Category {
  id    String  @id @default(auto()) @map("_id") @db.ObjectId
  name  String  @unique
  branchId String   @db.ObjectId
  // Relationships
  expenses      Expense[]
  frequentItems FrequentItem[]

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("categories")
}

model Expense {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   
  itemName   String   
  quantity   Int      @default(1)
  categoryId String   @db.ObjectId
  amount     Float    
  dateAdded  DateTime @default(now())
  isFrequent Boolean  @default(false)
  companyId  String   @db.ObjectId
  branchId   String   @db.ObjectId
  
  category   Category @relation(fields: [categoryId], references: [id])
  company    Company  @relation(fields: [companyId], references: [id])
  branch     Branch   @relation(fields: [branchId], references: [id])

  
  updatedAt DateTime @updatedAt

 
  @@index([userId])
  @@index([categoryId])
  @@index([dateAdded])

  @@map("expenses")
}

model FrequentItem {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   
  itemName   String   
  categoryId String   @db.ObjectId
  quantity   Int      @default(1)

  // Relationships
  category   Category @relation(fields: [categoryId], references: [id])
  branchId   String   @db.ObjectId
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  
  @@index([userId])
  @@index([categoryId])

  @@map("frequentItems")
}


model ExpensePayment {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  expenseId     String      @db.ObjectId
  paymentDate   DateTime
 
  amount        Int

  @@map("expense_payments")
}