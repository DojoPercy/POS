// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  email       String   @unique
  fullname    String?             
  password    String                      
  role        String                      // User roles: "owner", "manager", "waiter", "kitchen"
  phone       String?                     
  branchId    String?   @db.ObjectId       // Foreign key linking the user to a branch
  status      String?    @default("active") 
  createdAt   DateTime? @default(now())     // Timestamp for account creation
  updatedAt   DateTime? @updatedAt          // Timestamp for the last update


}


model Branch {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   // Name of the branch
  location    String   // Full address of the branch
  city        String   // City where the branch is located
  state       String?  // State or province (optional)
  country     String   // Country where the branch is located
  openingHours String?  // Operating hours (e.g., "9:00 AM - 10:00 PM")
  status      String   @default("active") // Status of the branch: active or inactive
  managerId   String?  @db.ObjectId       // Reference to the assigned branch manager's ID @unique
  createdBy   String?   @db.ObjectId       // Reference to the owner's ID who created the branch
  createdAt   DateTime? @default(now())    // Timestamp when the branch was created
  updatedAt   DateTime? @updatedAt         // Timestamp for the last update


}
model Menu {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  price       Float
  imageBase64 String
  category    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Order {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  waiterId        String      @db.ObjectId
  branchId        String      @db.ObjectId
  orderLines      OrderLine[] // One-to-many relationship with OrderLine
  totalPrice      Float       @default(0.0)
  discount        Float       @default(0.0)
  rounding        Float       @default(0.0)
  finalPrice      Float       @default(0.0) // totalPrice - discount + rounding
  payment         Payment[]   // Payment details linked to the order
  isCompleted     Boolean     @default(false) // Tracks if the order is finalized
  isCheckedOut    Boolean     @default(false) // Tracks if payment has been made
  orderedDate     DateTime    @default(now()) // When the order was placed
  requiredDate    DateTime?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  @@map("orders")
}

model OrderLine {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId     String   @db.ObjectId
  order       Order    @relation(fields: [orderId], references: [id]) // Foreign key relationship
  menuItemId  String   @db.ObjectId
  quantity    Int      @default(1) // Quantity of the menu item
  price       Float    @default(0.0) // Unit price at the time of order
  totalPrice  Float    @default(0.0) // Calculated: quantity * price

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("order_lines")
}

model Supplier {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  phone           String?
  email           String?
  address         String?
  homePage        String?
  supplierContact SupplierContact[]
  expense         Expense[]

  @@map("suppliers")
}

model SupplierContact {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  jobTitle      String?
  phone         String?
  email         String?
  accountNumber String?
  accountBank   String?
  supplier      Supplier @relation(fields: [supplierId], references: [id])
  supplierId    String   @db.ObjectId

  @@map("supplier_contacts")
}












model PaymentType {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  payment        Payment[]
  ExpensePayment ExpensePayment[]

  @@map("payment_types")
}

model Payment {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  order         Order       @relation(fields: [orderId], references: [id])
  orderId       String      @db.ObjectId
  date          DateTime    @default(now())
  paymentType   PaymentType @relation(fields: [paymentTypeId], references: [id])
  paymentTypeId String      @db.ObjectId
  amount        Int

  @@map("payments")
}

model ExpenseType {
  id      String    @id @default(auto()) @map("_id") @db.ObjectId
  name    String
  expense Expense[]

  @@map("expense_types")
}

model Expense {
  id               String             @id @default(auto()) @map("_id") @db.ObjectId
  date             DateTime           @default(now())
  expenseType      ExpenseType        @relation(fields: [expenseTypeId], references: [id])
  expenseTypeId    String             @db.ObjectId
  description      String
  amount           Int
  supplier         Supplier?          @relation(fields: [supplierId], references: [id])
  supplierId       String?            @db.ObjectId
 
  expensePayment   ExpensePayment[]

  @@map("expenses")
}



model ExpensePayment {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  expense       Expense     @relation(fields: [expenseId], references: [id])
  expenseId     String      @db.ObjectId
  paymentDate   DateTime
  paymentType   PaymentType @relation(fields: [paymentTypeId], references: [id])
  paymentTypeId String      @db.ObjectId
  amount        Int

  @@map("expense_payments")
}